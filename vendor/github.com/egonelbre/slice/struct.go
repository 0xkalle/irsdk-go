// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Generated by running
//	genstruct -largest=256 > struct.go && go fmt struct.go
// DO NOT EDIT

package slice

import (
	"sort"
	"unsafe"
)

func swapStruct(size uintptr, less func(i, j int) bool, header unsafe.Pointer) (sort.Interface, bool) {
	switch size {
	case 4:
		return &swap4{slice: *(*[]struct4)(header), less: less}, true
	case 8:
		return &swap8{slice: *(*[]struct8)(header), less: less}, true
	case 12:
		return &swap12{slice: *(*[]struct12)(header), less: less}, true
	case 16:
		return &swap16{slice: *(*[]struct16)(header), less: less}, true
	case 20:
		return &swap20{slice: *(*[]struct20)(header), less: less}, true
	case 24:
		return &swap24{slice: *(*[]struct24)(header), less: less}, true
	case 28:
		return &swap28{slice: *(*[]struct28)(header), less: less}, true
	case 32:
		return &swap32{slice: *(*[]struct32)(header), less: less}, true
	case 36:
		return &swap36{slice: *(*[]struct36)(header), less: less}, true
	case 40:
		return &swap40{slice: *(*[]struct40)(header), less: less}, true
	case 44:
		return &swap44{slice: *(*[]struct44)(header), less: less}, true
	case 48:
		return &swap48{slice: *(*[]struct48)(header), less: less}, true
	case 52:
		return &swap52{slice: *(*[]struct52)(header), less: less}, true
	case 56:
		return &swap56{slice: *(*[]struct56)(header), less: less}, true
	case 60:
		return &swap60{slice: *(*[]struct60)(header), less: less}, true
	case 64:
		return &swap64{slice: *(*[]struct64)(header), less: less}, true
	case 68:
		return &swap68{slice: *(*[]struct68)(header), less: less}, true
	case 72:
		return &swap72{slice: *(*[]struct72)(header), less: less}, true
	case 76:
		return &swap76{slice: *(*[]struct76)(header), less: less}, true
	case 80:
		return &swap80{slice: *(*[]struct80)(header), less: less}, true
	case 84:
		return &swap84{slice: *(*[]struct84)(header), less: less}, true
	case 88:
		return &swap88{slice: *(*[]struct88)(header), less: less}, true
	case 92:
		return &swap92{slice: *(*[]struct92)(header), less: less}, true
	case 96:
		return &swap96{slice: *(*[]struct96)(header), less: less}, true
	case 100:
		return &swap100{slice: *(*[]struct100)(header), less: less}, true
	case 104:
		return &swap104{slice: *(*[]struct104)(header), less: less}, true
	case 108:
		return &swap108{slice: *(*[]struct108)(header), less: less}, true
	case 112:
		return &swap112{slice: *(*[]struct112)(header), less: less}, true
	case 116:
		return &swap116{slice: *(*[]struct116)(header), less: less}, true
	case 120:
		return &swap120{slice: *(*[]struct120)(header), less: less}, true
	case 124:
		return &swap124{slice: *(*[]struct124)(header), less: less}, true
	case 128:
		return &swap128{slice: *(*[]struct128)(header), less: less}, true
	case 132:
		return &swap132{slice: *(*[]struct132)(header), less: less}, true
	case 136:
		return &swap136{slice: *(*[]struct136)(header), less: less}, true
	case 140:
		return &swap140{slice: *(*[]struct140)(header), less: less}, true
	case 144:
		return &swap144{slice: *(*[]struct144)(header), less: less}, true
	case 148:
		return &swap148{slice: *(*[]struct148)(header), less: less}, true
	case 152:
		return &swap152{slice: *(*[]struct152)(header), less: less}, true
	case 156:
		return &swap156{slice: *(*[]struct156)(header), less: less}, true
	case 160:
		return &swap160{slice: *(*[]struct160)(header), less: less}, true
	case 164:
		return &swap164{slice: *(*[]struct164)(header), less: less}, true
	case 168:
		return &swap168{slice: *(*[]struct168)(header), less: less}, true
	case 172:
		return &swap172{slice: *(*[]struct172)(header), less: less}, true
	case 176:
		return &swap176{slice: *(*[]struct176)(header), less: less}, true
	case 180:
		return &swap180{slice: *(*[]struct180)(header), less: less}, true
	case 184:
		return &swap184{slice: *(*[]struct184)(header), less: less}, true
	case 188:
		return &swap188{slice: *(*[]struct188)(header), less: less}, true
	case 192:
		return &swap192{slice: *(*[]struct192)(header), less: less}, true
	case 196:
		return &swap196{slice: *(*[]struct196)(header), less: less}, true
	case 200:
		return &swap200{slice: *(*[]struct200)(header), less: less}, true
	case 204:
		return &swap204{slice: *(*[]struct204)(header), less: less}, true
	case 208:
		return &swap208{slice: *(*[]struct208)(header), less: less}, true
	case 212:
		return &swap212{slice: *(*[]struct212)(header), less: less}, true
	case 216:
		return &swap216{slice: *(*[]struct216)(header), less: less}, true
	case 220:
		return &swap220{slice: *(*[]struct220)(header), less: less}, true
	case 224:
		return &swap224{slice: *(*[]struct224)(header), less: less}, true
	case 228:
		return &swap228{slice: *(*[]struct228)(header), less: less}, true
	case 232:
		return &swap232{slice: *(*[]struct232)(header), less: less}, true
	case 236:
		return &swap236{slice: *(*[]struct236)(header), less: less}, true
	case 240:
		return &swap240{slice: *(*[]struct240)(header), less: less}, true
	case 244:
		return &swap244{slice: *(*[]struct244)(header), less: less}, true
	case 248:
		return &swap248{slice: *(*[]struct248)(header), less: less}, true
	case 252:
		return &swap252{slice: *(*[]struct252)(header), less: less}, true
	case 256:
		return &swap256{slice: *(*[]struct256)(header), less: less}, true
	default:
		return nil, false
	}
}

// swap4 swaps 4-byte elements.
type struct4 [1]uint32
type swap4 struct {
	slice []struct4
	less  func(i, j int) bool
}

func (s *swap4) Len() int           { return len(s.slice) }
func (s *swap4) Less(i, j int) bool { return s.less(i, j) }
func (s *swap4) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
}

// swap8 swaps 8-byte elements.
type struct8 [1]uint64
type swap8 struct {
	slice []struct8
	less  func(i, j int) bool
}

func (s *swap8) Len() int           { return len(s.slice) }
func (s *swap8) Less(i, j int) bool { return s.less(i, j) }
func (s *swap8) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
}

// swap12 swaps 12-byte elements.
type struct12 [3]uint32
type swap12 struct {
	slice []struct12
	less  func(i, j int) bool
}

func (s *swap12) Len() int           { return len(s.slice) }
func (s *swap12) Less(i, j int) bool { return s.less(i, j) }
func (s *swap12) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
}

// swap16 swaps 16-byte elements.
type struct16 [2]uint64
type swap16 struct {
	slice []struct16
	less  func(i, j int) bool
}

func (s *swap16) Len() int           { return len(s.slice) }
func (s *swap16) Less(i, j int) bool { return s.less(i, j) }
func (s *swap16) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
}

// swap20 swaps 20-byte elements.
type struct20 [5]uint32
type swap20 struct {
	slice []struct20
	less  func(i, j int) bool
}

func (s *swap20) Len() int           { return len(s.slice) }
func (s *swap20) Less(i, j int) bool { return s.less(i, j) }
func (s *swap20) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
}

// swap24 swaps 24-byte elements.
type struct24 [3]uint64
type swap24 struct {
	slice []struct24
	less  func(i, j int) bool
}

func (s *swap24) Len() int           { return len(s.slice) }
func (s *swap24) Less(i, j int) bool { return s.less(i, j) }
func (s *swap24) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
}

// swap28 swaps 28-byte elements.
type struct28 [7]uint32
type swap28 struct {
	slice []struct28
	less  func(i, j int) bool
}

func (s *swap28) Len() int           { return len(s.slice) }
func (s *swap28) Less(i, j int) bool { return s.less(i, j) }
func (s *swap28) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
}

// swap32 swaps 32-byte elements.
type struct32 [4]uint64
type swap32 struct {
	slice []struct32
	less  func(i, j int) bool
}

func (s *swap32) Len() int           { return len(s.slice) }
func (s *swap32) Less(i, j int) bool { return s.less(i, j) }
func (s *swap32) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
}

// swap36 swaps 36-byte elements.
type struct36 [9]uint32
type swap36 struct {
	slice []struct36
	less  func(i, j int) bool
}

func (s *swap36) Len() int           { return len(s.slice) }
func (s *swap36) Less(i, j int) bool { return s.less(i, j) }
func (s *swap36) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
}

// swap40 swaps 40-byte elements.
type struct40 [5]uint64
type swap40 struct {
	slice []struct40
	less  func(i, j int) bool
}

func (s *swap40) Len() int           { return len(s.slice) }
func (s *swap40) Less(i, j int) bool { return s.less(i, j) }
func (s *swap40) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
}

// swap44 swaps 44-byte elements.
type struct44 [11]uint32
type swap44 struct {
	slice []struct44
	less  func(i, j int) bool
}

func (s *swap44) Len() int           { return len(s.slice) }
func (s *swap44) Less(i, j int) bool { return s.less(i, j) }
func (s *swap44) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
}

// swap48 swaps 48-byte elements.
type struct48 [6]uint64
type swap48 struct {
	slice []struct48
	less  func(i, j int) bool
}

func (s *swap48) Len() int           { return len(s.slice) }
func (s *swap48) Less(i, j int) bool { return s.less(i, j) }
func (s *swap48) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
}

// swap52 swaps 52-byte elements.
type struct52 [13]uint32
type swap52 struct {
	slice []struct52
	less  func(i, j int) bool
}

func (s *swap52) Len() int           { return len(s.slice) }
func (s *swap52) Less(i, j int) bool { return s.less(i, j) }
func (s *swap52) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
}

// swap56 swaps 56-byte elements.
type struct56 [7]uint64
type swap56 struct {
	slice []struct56
	less  func(i, j int) bool
}

func (s *swap56) Len() int           { return len(s.slice) }
func (s *swap56) Less(i, j int) bool { return s.less(i, j) }
func (s *swap56) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
}

// swap60 swaps 60-byte elements.
type struct60 [15]uint32
type swap60 struct {
	slice []struct60
	less  func(i, j int) bool
}

func (s *swap60) Len() int           { return len(s.slice) }
func (s *swap60) Less(i, j int) bool { return s.less(i, j) }
func (s *swap60) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
}

// swap64 swaps 64-byte elements.
type struct64 [8]uint64
type swap64 struct {
	slice []struct64
	less  func(i, j int) bool
}

func (s *swap64) Len() int           { return len(s.slice) }
func (s *swap64) Less(i, j int) bool { return s.less(i, j) }
func (s *swap64) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
}

// swap68 swaps 68-byte elements.
type struct68 [17]uint32
type swap68 struct {
	slice []struct68
	less  func(i, j int) bool
}

func (s *swap68) Len() int           { return len(s.slice) }
func (s *swap68) Less(i, j int) bool { return s.less(i, j) }
func (s *swap68) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
}

// swap72 swaps 72-byte elements.
type struct72 [9]uint64
type swap72 struct {
	slice []struct72
	less  func(i, j int) bool
}

func (s *swap72) Len() int           { return len(s.slice) }
func (s *swap72) Less(i, j int) bool { return s.less(i, j) }
func (s *swap72) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
}

// swap76 swaps 76-byte elements.
type struct76 [19]uint32
type swap76 struct {
	slice []struct76
	less  func(i, j int) bool
}

func (s *swap76) Len() int           { return len(s.slice) }
func (s *swap76) Less(i, j int) bool { return s.less(i, j) }
func (s *swap76) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
}

// swap80 swaps 80-byte elements.
type struct80 [10]uint64
type swap80 struct {
	slice []struct80
	less  func(i, j int) bool
}

func (s *swap80) Len() int           { return len(s.slice) }
func (s *swap80) Less(i, j int) bool { return s.less(i, j) }
func (s *swap80) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
}

// swap84 swaps 84-byte elements.
type struct84 [21]uint32
type swap84 struct {
	slice []struct84
	less  func(i, j int) bool
}

func (s *swap84) Len() int           { return len(s.slice) }
func (s *swap84) Less(i, j int) bool { return s.less(i, j) }
func (s *swap84) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
}

// swap88 swaps 88-byte elements.
type struct88 [11]uint64
type swap88 struct {
	slice []struct88
	less  func(i, j int) bool
}

func (s *swap88) Len() int           { return len(s.slice) }
func (s *swap88) Less(i, j int) bool { return s.less(i, j) }
func (s *swap88) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
}

// swap92 swaps 92-byte elements.
type struct92 [23]uint32
type swap92 struct {
	slice []struct92
	less  func(i, j int) bool
}

func (s *swap92) Len() int           { return len(s.slice) }
func (s *swap92) Less(i, j int) bool { return s.less(i, j) }
func (s *swap92) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
}

// swap96 swaps 96-byte elements.
type struct96 [12]uint64
type swap96 struct {
	slice []struct96
	less  func(i, j int) bool
}

func (s *swap96) Len() int           { return len(s.slice) }
func (s *swap96) Less(i, j int) bool { return s.less(i, j) }
func (s *swap96) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
}

// swap100 swaps 100-byte elements.
type struct100 [25]uint32
type swap100 struct {
	slice []struct100
	less  func(i, j int) bool
}

func (s *swap100) Len() int           { return len(s.slice) }
func (s *swap100) Less(i, j int) bool { return s.less(i, j) }
func (s *swap100) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
	a[23], b[23] = b[23], a[23]
	a[24], b[24] = b[24], a[24]
}

// swap104 swaps 104-byte elements.
type struct104 [13]uint64
type swap104 struct {
	slice []struct104
	less  func(i, j int) bool
}

func (s *swap104) Len() int           { return len(s.slice) }
func (s *swap104) Less(i, j int) bool { return s.less(i, j) }
func (s *swap104) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
}

// swap108 swaps 108-byte elements.
type struct108 [27]uint32
type swap108 struct {
	slice []struct108
	less  func(i, j int) bool
}

func (s *swap108) Len() int           { return len(s.slice) }
func (s *swap108) Less(i, j int) bool { return s.less(i, j) }
func (s *swap108) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
	a[23], b[23] = b[23], a[23]
	a[24], b[24] = b[24], a[24]
	a[25], b[25] = b[25], a[25]
	a[26], b[26] = b[26], a[26]
}

// swap112 swaps 112-byte elements.
type struct112 [14]uint64
type swap112 struct {
	slice []struct112
	less  func(i, j int) bool
}

func (s *swap112) Len() int           { return len(s.slice) }
func (s *swap112) Less(i, j int) bool { return s.less(i, j) }
func (s *swap112) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
}

// swap116 swaps 116-byte elements.
type struct116 [29]uint32
type swap116 struct {
	slice []struct116
	less  func(i, j int) bool
}

func (s *swap116) Len() int           { return len(s.slice) }
func (s *swap116) Less(i, j int) bool { return s.less(i, j) }
func (s *swap116) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
	a[23], b[23] = b[23], a[23]
	a[24], b[24] = b[24], a[24]
	a[25], b[25] = b[25], a[25]
	a[26], b[26] = b[26], a[26]
	a[27], b[27] = b[27], a[27]
	a[28], b[28] = b[28], a[28]
}

// swap120 swaps 120-byte elements.
type struct120 [15]uint64
type swap120 struct {
	slice []struct120
	less  func(i, j int) bool
}

func (s *swap120) Len() int           { return len(s.slice) }
func (s *swap120) Less(i, j int) bool { return s.less(i, j) }
func (s *swap120) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
}

// swap124 swaps 124-byte elements.
type struct124 [31]uint32
type swap124 struct {
	slice []struct124
	less  func(i, j int) bool
}

func (s *swap124) Len() int           { return len(s.slice) }
func (s *swap124) Less(i, j int) bool { return s.less(i, j) }
func (s *swap124) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
	a[23], b[23] = b[23], a[23]
	a[24], b[24] = b[24], a[24]
	a[25], b[25] = b[25], a[25]
	a[26], b[26] = b[26], a[26]
	a[27], b[27] = b[27], a[27]
	a[28], b[28] = b[28], a[28]
	a[29], b[29] = b[29], a[29]
	a[30], b[30] = b[30], a[30]
}

// swap128 swaps 128-byte elements.
type struct128 [16]uint64
type swap128 struct {
	slice []struct128
	less  func(i, j int) bool
}

func (s *swap128) Len() int           { return len(s.slice) }
func (s *swap128) Less(i, j int) bool { return s.less(i, j) }
func (s *swap128) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
}

// swap132 swaps 132-byte elements.
type struct132 [33]uint32
type swap132 struct {
	slice []struct132
	less  func(i, j int) bool
}

func (s *swap132) Len() int           { return len(s.slice) }
func (s *swap132) Less(i, j int) bool { return s.less(i, j) }
func (s *swap132) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
	a[23], b[23] = b[23], a[23]
	a[24], b[24] = b[24], a[24]
	a[25], b[25] = b[25], a[25]
	a[26], b[26] = b[26], a[26]
	a[27], b[27] = b[27], a[27]
	a[28], b[28] = b[28], a[28]
	a[29], b[29] = b[29], a[29]
	a[30], b[30] = b[30], a[30]
	a[31], b[31] = b[31], a[31]
	a[32], b[32] = b[32], a[32]
}

// swap136 swaps 136-byte elements.
type struct136 [17]uint64
type swap136 struct {
	slice []struct136
	less  func(i, j int) bool
}

func (s *swap136) Len() int           { return len(s.slice) }
func (s *swap136) Less(i, j int) bool { return s.less(i, j) }
func (s *swap136) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
}

// swap140 swaps 140-byte elements.
type struct140 [35]uint32
type swap140 struct {
	slice []struct140
	less  func(i, j int) bool
}

func (s *swap140) Len() int           { return len(s.slice) }
func (s *swap140) Less(i, j int) bool { return s.less(i, j) }
func (s *swap140) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
	a[23], b[23] = b[23], a[23]
	a[24], b[24] = b[24], a[24]
	a[25], b[25] = b[25], a[25]
	a[26], b[26] = b[26], a[26]
	a[27], b[27] = b[27], a[27]
	a[28], b[28] = b[28], a[28]
	a[29], b[29] = b[29], a[29]
	a[30], b[30] = b[30], a[30]
	a[31], b[31] = b[31], a[31]
	a[32], b[32] = b[32], a[32]
	a[33], b[33] = b[33], a[33]
	a[34], b[34] = b[34], a[34]
}

// swap144 swaps 144-byte elements.
type struct144 [18]uint64
type swap144 struct {
	slice []struct144
	less  func(i, j int) bool
}

func (s *swap144) Len() int           { return len(s.slice) }
func (s *swap144) Less(i, j int) bool { return s.less(i, j) }
func (s *swap144) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
}

// swap148 swaps 148-byte elements.
type struct148 [37]uint32
type swap148 struct {
	slice []struct148
	less  func(i, j int) bool
}

func (s *swap148) Len() int           { return len(s.slice) }
func (s *swap148) Less(i, j int) bool { return s.less(i, j) }
func (s *swap148) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
	a[23], b[23] = b[23], a[23]
	a[24], b[24] = b[24], a[24]
	a[25], b[25] = b[25], a[25]
	a[26], b[26] = b[26], a[26]
	a[27], b[27] = b[27], a[27]
	a[28], b[28] = b[28], a[28]
	a[29], b[29] = b[29], a[29]
	a[30], b[30] = b[30], a[30]
	a[31], b[31] = b[31], a[31]
	a[32], b[32] = b[32], a[32]
	a[33], b[33] = b[33], a[33]
	a[34], b[34] = b[34], a[34]
	a[35], b[35] = b[35], a[35]
	a[36], b[36] = b[36], a[36]
}

// swap152 swaps 152-byte elements.
type struct152 [19]uint64
type swap152 struct {
	slice []struct152
	less  func(i, j int) bool
}

func (s *swap152) Len() int           { return len(s.slice) }
func (s *swap152) Less(i, j int) bool { return s.less(i, j) }
func (s *swap152) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
}

// swap156 swaps 156-byte elements.
type struct156 [39]uint32
type swap156 struct {
	slice []struct156
	less  func(i, j int) bool
}

func (s *swap156) Len() int           { return len(s.slice) }
func (s *swap156) Less(i, j int) bool { return s.less(i, j) }
func (s *swap156) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
	a[23], b[23] = b[23], a[23]
	a[24], b[24] = b[24], a[24]
	a[25], b[25] = b[25], a[25]
	a[26], b[26] = b[26], a[26]
	a[27], b[27] = b[27], a[27]
	a[28], b[28] = b[28], a[28]
	a[29], b[29] = b[29], a[29]
	a[30], b[30] = b[30], a[30]
	a[31], b[31] = b[31], a[31]
	a[32], b[32] = b[32], a[32]
	a[33], b[33] = b[33], a[33]
	a[34], b[34] = b[34], a[34]
	a[35], b[35] = b[35], a[35]
	a[36], b[36] = b[36], a[36]
	a[37], b[37] = b[37], a[37]
	a[38], b[38] = b[38], a[38]
}

// swap160 swaps 160-byte elements.
type struct160 [20]uint64
type swap160 struct {
	slice []struct160
	less  func(i, j int) bool
}

func (s *swap160) Len() int           { return len(s.slice) }
func (s *swap160) Less(i, j int) bool { return s.less(i, j) }
func (s *swap160) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
}

// swap164 swaps 164-byte elements.
type struct164 [41]uint32
type swap164 struct {
	slice []struct164
	less  func(i, j int) bool
}

func (s *swap164) Len() int           { return len(s.slice) }
func (s *swap164) Less(i, j int) bool { return s.less(i, j) }
func (s *swap164) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
	a[23], b[23] = b[23], a[23]
	a[24], b[24] = b[24], a[24]
	a[25], b[25] = b[25], a[25]
	a[26], b[26] = b[26], a[26]
	a[27], b[27] = b[27], a[27]
	a[28], b[28] = b[28], a[28]
	a[29], b[29] = b[29], a[29]
	a[30], b[30] = b[30], a[30]
	a[31], b[31] = b[31], a[31]
	a[32], b[32] = b[32], a[32]
	a[33], b[33] = b[33], a[33]
	a[34], b[34] = b[34], a[34]
	a[35], b[35] = b[35], a[35]
	a[36], b[36] = b[36], a[36]
	a[37], b[37] = b[37], a[37]
	a[38], b[38] = b[38], a[38]
	a[39], b[39] = b[39], a[39]
	a[40], b[40] = b[40], a[40]
}

// swap168 swaps 168-byte elements.
type struct168 [21]uint64
type swap168 struct {
	slice []struct168
	less  func(i, j int) bool
}

func (s *swap168) Len() int           { return len(s.slice) }
func (s *swap168) Less(i, j int) bool { return s.less(i, j) }
func (s *swap168) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
}

// swap172 swaps 172-byte elements.
type struct172 [43]uint32
type swap172 struct {
	slice []struct172
	less  func(i, j int) bool
}

func (s *swap172) Len() int           { return len(s.slice) }
func (s *swap172) Less(i, j int) bool { return s.less(i, j) }
func (s *swap172) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
	a[23], b[23] = b[23], a[23]
	a[24], b[24] = b[24], a[24]
	a[25], b[25] = b[25], a[25]
	a[26], b[26] = b[26], a[26]
	a[27], b[27] = b[27], a[27]
	a[28], b[28] = b[28], a[28]
	a[29], b[29] = b[29], a[29]
	a[30], b[30] = b[30], a[30]
	a[31], b[31] = b[31], a[31]
	a[32], b[32] = b[32], a[32]
	a[33], b[33] = b[33], a[33]
	a[34], b[34] = b[34], a[34]
	a[35], b[35] = b[35], a[35]
	a[36], b[36] = b[36], a[36]
	a[37], b[37] = b[37], a[37]
	a[38], b[38] = b[38], a[38]
	a[39], b[39] = b[39], a[39]
	a[40], b[40] = b[40], a[40]
	a[41], b[41] = b[41], a[41]
	a[42], b[42] = b[42], a[42]
}

// swap176 swaps 176-byte elements.
type struct176 [22]uint64
type swap176 struct {
	slice []struct176
	less  func(i, j int) bool
}

func (s *swap176) Len() int           { return len(s.slice) }
func (s *swap176) Less(i, j int) bool { return s.less(i, j) }
func (s *swap176) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
}

// swap180 swaps 180-byte elements.
type struct180 [45]uint32
type swap180 struct {
	slice []struct180
	less  func(i, j int) bool
}

func (s *swap180) Len() int           { return len(s.slice) }
func (s *swap180) Less(i, j int) bool { return s.less(i, j) }
func (s *swap180) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
	a[23], b[23] = b[23], a[23]
	a[24], b[24] = b[24], a[24]
	a[25], b[25] = b[25], a[25]
	a[26], b[26] = b[26], a[26]
	a[27], b[27] = b[27], a[27]
	a[28], b[28] = b[28], a[28]
	a[29], b[29] = b[29], a[29]
	a[30], b[30] = b[30], a[30]
	a[31], b[31] = b[31], a[31]
	a[32], b[32] = b[32], a[32]
	a[33], b[33] = b[33], a[33]
	a[34], b[34] = b[34], a[34]
	a[35], b[35] = b[35], a[35]
	a[36], b[36] = b[36], a[36]
	a[37], b[37] = b[37], a[37]
	a[38], b[38] = b[38], a[38]
	a[39], b[39] = b[39], a[39]
	a[40], b[40] = b[40], a[40]
	a[41], b[41] = b[41], a[41]
	a[42], b[42] = b[42], a[42]
	a[43], b[43] = b[43], a[43]
	a[44], b[44] = b[44], a[44]
}

// swap184 swaps 184-byte elements.
type struct184 [23]uint64
type swap184 struct {
	slice []struct184
	less  func(i, j int) bool
}

func (s *swap184) Len() int           { return len(s.slice) }
func (s *swap184) Less(i, j int) bool { return s.less(i, j) }
func (s *swap184) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
}

// swap188 swaps 188-byte elements.
type struct188 [47]uint32
type swap188 struct {
	slice []struct188
	less  func(i, j int) bool
}

func (s *swap188) Len() int           { return len(s.slice) }
func (s *swap188) Less(i, j int) bool { return s.less(i, j) }
func (s *swap188) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
	a[23], b[23] = b[23], a[23]
	a[24], b[24] = b[24], a[24]
	a[25], b[25] = b[25], a[25]
	a[26], b[26] = b[26], a[26]
	a[27], b[27] = b[27], a[27]
	a[28], b[28] = b[28], a[28]
	a[29], b[29] = b[29], a[29]
	a[30], b[30] = b[30], a[30]
	a[31], b[31] = b[31], a[31]
	a[32], b[32] = b[32], a[32]
	a[33], b[33] = b[33], a[33]
	a[34], b[34] = b[34], a[34]
	a[35], b[35] = b[35], a[35]
	a[36], b[36] = b[36], a[36]
	a[37], b[37] = b[37], a[37]
	a[38], b[38] = b[38], a[38]
	a[39], b[39] = b[39], a[39]
	a[40], b[40] = b[40], a[40]
	a[41], b[41] = b[41], a[41]
	a[42], b[42] = b[42], a[42]
	a[43], b[43] = b[43], a[43]
	a[44], b[44] = b[44], a[44]
	a[45], b[45] = b[45], a[45]
	a[46], b[46] = b[46], a[46]
}

// swap192 swaps 192-byte elements.
type struct192 [24]uint64
type swap192 struct {
	slice []struct192
	less  func(i, j int) bool
}

func (s *swap192) Len() int           { return len(s.slice) }
func (s *swap192) Less(i, j int) bool { return s.less(i, j) }
func (s *swap192) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
	a[23], b[23] = b[23], a[23]
}

// swap196 swaps 196-byte elements.
type struct196 [49]uint32
type swap196 struct {
	slice []struct196
	less  func(i, j int) bool
}

func (s *swap196) Len() int           { return len(s.slice) }
func (s *swap196) Less(i, j int) bool { return s.less(i, j) }
func (s *swap196) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
	a[23], b[23] = b[23], a[23]
	a[24], b[24] = b[24], a[24]
	a[25], b[25] = b[25], a[25]
	a[26], b[26] = b[26], a[26]
	a[27], b[27] = b[27], a[27]
	a[28], b[28] = b[28], a[28]
	a[29], b[29] = b[29], a[29]
	a[30], b[30] = b[30], a[30]
	a[31], b[31] = b[31], a[31]
	a[32], b[32] = b[32], a[32]
	a[33], b[33] = b[33], a[33]
	a[34], b[34] = b[34], a[34]
	a[35], b[35] = b[35], a[35]
	a[36], b[36] = b[36], a[36]
	a[37], b[37] = b[37], a[37]
	a[38], b[38] = b[38], a[38]
	a[39], b[39] = b[39], a[39]
	a[40], b[40] = b[40], a[40]
	a[41], b[41] = b[41], a[41]
	a[42], b[42] = b[42], a[42]
	a[43], b[43] = b[43], a[43]
	a[44], b[44] = b[44], a[44]
	a[45], b[45] = b[45], a[45]
	a[46], b[46] = b[46], a[46]
	a[47], b[47] = b[47], a[47]
	a[48], b[48] = b[48], a[48]
}

// swap200 swaps 200-byte elements.
type struct200 [25]uint64
type swap200 struct {
	slice []struct200
	less  func(i, j int) bool
}

func (s *swap200) Len() int           { return len(s.slice) }
func (s *swap200) Less(i, j int) bool { return s.less(i, j) }
func (s *swap200) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
	a[23], b[23] = b[23], a[23]
	a[24], b[24] = b[24], a[24]
}

// swap204 swaps 204-byte elements.
type struct204 [51]uint32
type swap204 struct {
	slice []struct204
	less  func(i, j int) bool
}

func (s *swap204) Len() int           { return len(s.slice) }
func (s *swap204) Less(i, j int) bool { return s.less(i, j) }
func (s *swap204) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
	a[23], b[23] = b[23], a[23]
	a[24], b[24] = b[24], a[24]
	a[25], b[25] = b[25], a[25]
	a[26], b[26] = b[26], a[26]
	a[27], b[27] = b[27], a[27]
	a[28], b[28] = b[28], a[28]
	a[29], b[29] = b[29], a[29]
	a[30], b[30] = b[30], a[30]
	a[31], b[31] = b[31], a[31]
	a[32], b[32] = b[32], a[32]
	a[33], b[33] = b[33], a[33]
	a[34], b[34] = b[34], a[34]
	a[35], b[35] = b[35], a[35]
	a[36], b[36] = b[36], a[36]
	a[37], b[37] = b[37], a[37]
	a[38], b[38] = b[38], a[38]
	a[39], b[39] = b[39], a[39]
	a[40], b[40] = b[40], a[40]
	a[41], b[41] = b[41], a[41]
	a[42], b[42] = b[42], a[42]
	a[43], b[43] = b[43], a[43]
	a[44], b[44] = b[44], a[44]
	a[45], b[45] = b[45], a[45]
	a[46], b[46] = b[46], a[46]
	a[47], b[47] = b[47], a[47]
	a[48], b[48] = b[48], a[48]
	a[49], b[49] = b[49], a[49]
	a[50], b[50] = b[50], a[50]
}

// swap208 swaps 208-byte elements.
type struct208 [26]uint64
type swap208 struct {
	slice []struct208
	less  func(i, j int) bool
}

func (s *swap208) Len() int           { return len(s.slice) }
func (s *swap208) Less(i, j int) bool { return s.less(i, j) }
func (s *swap208) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
	a[23], b[23] = b[23], a[23]
	a[24], b[24] = b[24], a[24]
	a[25], b[25] = b[25], a[25]
}

// swap212 swaps 212-byte elements.
type struct212 [53]uint32
type swap212 struct {
	slice []struct212
	less  func(i, j int) bool
}

func (s *swap212) Len() int           { return len(s.slice) }
func (s *swap212) Less(i, j int) bool { return s.less(i, j) }
func (s *swap212) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
	a[23], b[23] = b[23], a[23]
	a[24], b[24] = b[24], a[24]
	a[25], b[25] = b[25], a[25]
	a[26], b[26] = b[26], a[26]
	a[27], b[27] = b[27], a[27]
	a[28], b[28] = b[28], a[28]
	a[29], b[29] = b[29], a[29]
	a[30], b[30] = b[30], a[30]
	a[31], b[31] = b[31], a[31]
	a[32], b[32] = b[32], a[32]
	a[33], b[33] = b[33], a[33]
	a[34], b[34] = b[34], a[34]
	a[35], b[35] = b[35], a[35]
	a[36], b[36] = b[36], a[36]
	a[37], b[37] = b[37], a[37]
	a[38], b[38] = b[38], a[38]
	a[39], b[39] = b[39], a[39]
	a[40], b[40] = b[40], a[40]
	a[41], b[41] = b[41], a[41]
	a[42], b[42] = b[42], a[42]
	a[43], b[43] = b[43], a[43]
	a[44], b[44] = b[44], a[44]
	a[45], b[45] = b[45], a[45]
	a[46], b[46] = b[46], a[46]
	a[47], b[47] = b[47], a[47]
	a[48], b[48] = b[48], a[48]
	a[49], b[49] = b[49], a[49]
	a[50], b[50] = b[50], a[50]
	a[51], b[51] = b[51], a[51]
	a[52], b[52] = b[52], a[52]
}

// swap216 swaps 216-byte elements.
type struct216 [27]uint64
type swap216 struct {
	slice []struct216
	less  func(i, j int) bool
}

func (s *swap216) Len() int           { return len(s.slice) }
func (s *swap216) Less(i, j int) bool { return s.less(i, j) }
func (s *swap216) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
	a[23], b[23] = b[23], a[23]
	a[24], b[24] = b[24], a[24]
	a[25], b[25] = b[25], a[25]
	a[26], b[26] = b[26], a[26]
}

// swap220 swaps 220-byte elements.
type struct220 [55]uint32
type swap220 struct {
	slice []struct220
	less  func(i, j int) bool
}

func (s *swap220) Len() int           { return len(s.slice) }
func (s *swap220) Less(i, j int) bool { return s.less(i, j) }
func (s *swap220) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
	a[23], b[23] = b[23], a[23]
	a[24], b[24] = b[24], a[24]
	a[25], b[25] = b[25], a[25]
	a[26], b[26] = b[26], a[26]
	a[27], b[27] = b[27], a[27]
	a[28], b[28] = b[28], a[28]
	a[29], b[29] = b[29], a[29]
	a[30], b[30] = b[30], a[30]
	a[31], b[31] = b[31], a[31]
	a[32], b[32] = b[32], a[32]
	a[33], b[33] = b[33], a[33]
	a[34], b[34] = b[34], a[34]
	a[35], b[35] = b[35], a[35]
	a[36], b[36] = b[36], a[36]
	a[37], b[37] = b[37], a[37]
	a[38], b[38] = b[38], a[38]
	a[39], b[39] = b[39], a[39]
	a[40], b[40] = b[40], a[40]
	a[41], b[41] = b[41], a[41]
	a[42], b[42] = b[42], a[42]
	a[43], b[43] = b[43], a[43]
	a[44], b[44] = b[44], a[44]
	a[45], b[45] = b[45], a[45]
	a[46], b[46] = b[46], a[46]
	a[47], b[47] = b[47], a[47]
	a[48], b[48] = b[48], a[48]
	a[49], b[49] = b[49], a[49]
	a[50], b[50] = b[50], a[50]
	a[51], b[51] = b[51], a[51]
	a[52], b[52] = b[52], a[52]
	a[53], b[53] = b[53], a[53]
	a[54], b[54] = b[54], a[54]
}

// swap224 swaps 224-byte elements.
type struct224 [28]uint64
type swap224 struct {
	slice []struct224
	less  func(i, j int) bool
}

func (s *swap224) Len() int           { return len(s.slice) }
func (s *swap224) Less(i, j int) bool { return s.less(i, j) }
func (s *swap224) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
	a[23], b[23] = b[23], a[23]
	a[24], b[24] = b[24], a[24]
	a[25], b[25] = b[25], a[25]
	a[26], b[26] = b[26], a[26]
	a[27], b[27] = b[27], a[27]
}

// swap228 swaps 228-byte elements.
type struct228 [57]uint32
type swap228 struct {
	slice []struct228
	less  func(i, j int) bool
}

func (s *swap228) Len() int           { return len(s.slice) }
func (s *swap228) Less(i, j int) bool { return s.less(i, j) }
func (s *swap228) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
	a[23], b[23] = b[23], a[23]
	a[24], b[24] = b[24], a[24]
	a[25], b[25] = b[25], a[25]
	a[26], b[26] = b[26], a[26]
	a[27], b[27] = b[27], a[27]
	a[28], b[28] = b[28], a[28]
	a[29], b[29] = b[29], a[29]
	a[30], b[30] = b[30], a[30]
	a[31], b[31] = b[31], a[31]
	a[32], b[32] = b[32], a[32]
	a[33], b[33] = b[33], a[33]
	a[34], b[34] = b[34], a[34]
	a[35], b[35] = b[35], a[35]
	a[36], b[36] = b[36], a[36]
	a[37], b[37] = b[37], a[37]
	a[38], b[38] = b[38], a[38]
	a[39], b[39] = b[39], a[39]
	a[40], b[40] = b[40], a[40]
	a[41], b[41] = b[41], a[41]
	a[42], b[42] = b[42], a[42]
	a[43], b[43] = b[43], a[43]
	a[44], b[44] = b[44], a[44]
	a[45], b[45] = b[45], a[45]
	a[46], b[46] = b[46], a[46]
	a[47], b[47] = b[47], a[47]
	a[48], b[48] = b[48], a[48]
	a[49], b[49] = b[49], a[49]
	a[50], b[50] = b[50], a[50]
	a[51], b[51] = b[51], a[51]
	a[52], b[52] = b[52], a[52]
	a[53], b[53] = b[53], a[53]
	a[54], b[54] = b[54], a[54]
	a[55], b[55] = b[55], a[55]
	a[56], b[56] = b[56], a[56]
}

// swap232 swaps 232-byte elements.
type struct232 [29]uint64
type swap232 struct {
	slice []struct232
	less  func(i, j int) bool
}

func (s *swap232) Len() int           { return len(s.slice) }
func (s *swap232) Less(i, j int) bool { return s.less(i, j) }
func (s *swap232) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
	a[23], b[23] = b[23], a[23]
	a[24], b[24] = b[24], a[24]
	a[25], b[25] = b[25], a[25]
	a[26], b[26] = b[26], a[26]
	a[27], b[27] = b[27], a[27]
	a[28], b[28] = b[28], a[28]
}

// swap236 swaps 236-byte elements.
type struct236 [59]uint32
type swap236 struct {
	slice []struct236
	less  func(i, j int) bool
}

func (s *swap236) Len() int           { return len(s.slice) }
func (s *swap236) Less(i, j int) bool { return s.less(i, j) }
func (s *swap236) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
	a[23], b[23] = b[23], a[23]
	a[24], b[24] = b[24], a[24]
	a[25], b[25] = b[25], a[25]
	a[26], b[26] = b[26], a[26]
	a[27], b[27] = b[27], a[27]
	a[28], b[28] = b[28], a[28]
	a[29], b[29] = b[29], a[29]
	a[30], b[30] = b[30], a[30]
	a[31], b[31] = b[31], a[31]
	a[32], b[32] = b[32], a[32]
	a[33], b[33] = b[33], a[33]
	a[34], b[34] = b[34], a[34]
	a[35], b[35] = b[35], a[35]
	a[36], b[36] = b[36], a[36]
	a[37], b[37] = b[37], a[37]
	a[38], b[38] = b[38], a[38]
	a[39], b[39] = b[39], a[39]
	a[40], b[40] = b[40], a[40]
	a[41], b[41] = b[41], a[41]
	a[42], b[42] = b[42], a[42]
	a[43], b[43] = b[43], a[43]
	a[44], b[44] = b[44], a[44]
	a[45], b[45] = b[45], a[45]
	a[46], b[46] = b[46], a[46]
	a[47], b[47] = b[47], a[47]
	a[48], b[48] = b[48], a[48]
	a[49], b[49] = b[49], a[49]
	a[50], b[50] = b[50], a[50]
	a[51], b[51] = b[51], a[51]
	a[52], b[52] = b[52], a[52]
	a[53], b[53] = b[53], a[53]
	a[54], b[54] = b[54], a[54]
	a[55], b[55] = b[55], a[55]
	a[56], b[56] = b[56], a[56]
	a[57], b[57] = b[57], a[57]
	a[58], b[58] = b[58], a[58]
}

// swap240 swaps 240-byte elements.
type struct240 [30]uint64
type swap240 struct {
	slice []struct240
	less  func(i, j int) bool
}

func (s *swap240) Len() int           { return len(s.slice) }
func (s *swap240) Less(i, j int) bool { return s.less(i, j) }
func (s *swap240) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
	a[23], b[23] = b[23], a[23]
	a[24], b[24] = b[24], a[24]
	a[25], b[25] = b[25], a[25]
	a[26], b[26] = b[26], a[26]
	a[27], b[27] = b[27], a[27]
	a[28], b[28] = b[28], a[28]
	a[29], b[29] = b[29], a[29]
}

// swap244 swaps 244-byte elements.
type struct244 [61]uint32
type swap244 struct {
	slice []struct244
	less  func(i, j int) bool
}

func (s *swap244) Len() int           { return len(s.slice) }
func (s *swap244) Less(i, j int) bool { return s.less(i, j) }
func (s *swap244) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
	a[23], b[23] = b[23], a[23]
	a[24], b[24] = b[24], a[24]
	a[25], b[25] = b[25], a[25]
	a[26], b[26] = b[26], a[26]
	a[27], b[27] = b[27], a[27]
	a[28], b[28] = b[28], a[28]
	a[29], b[29] = b[29], a[29]
	a[30], b[30] = b[30], a[30]
	a[31], b[31] = b[31], a[31]
	a[32], b[32] = b[32], a[32]
	a[33], b[33] = b[33], a[33]
	a[34], b[34] = b[34], a[34]
	a[35], b[35] = b[35], a[35]
	a[36], b[36] = b[36], a[36]
	a[37], b[37] = b[37], a[37]
	a[38], b[38] = b[38], a[38]
	a[39], b[39] = b[39], a[39]
	a[40], b[40] = b[40], a[40]
	a[41], b[41] = b[41], a[41]
	a[42], b[42] = b[42], a[42]
	a[43], b[43] = b[43], a[43]
	a[44], b[44] = b[44], a[44]
	a[45], b[45] = b[45], a[45]
	a[46], b[46] = b[46], a[46]
	a[47], b[47] = b[47], a[47]
	a[48], b[48] = b[48], a[48]
	a[49], b[49] = b[49], a[49]
	a[50], b[50] = b[50], a[50]
	a[51], b[51] = b[51], a[51]
	a[52], b[52] = b[52], a[52]
	a[53], b[53] = b[53], a[53]
	a[54], b[54] = b[54], a[54]
	a[55], b[55] = b[55], a[55]
	a[56], b[56] = b[56], a[56]
	a[57], b[57] = b[57], a[57]
	a[58], b[58] = b[58], a[58]
	a[59], b[59] = b[59], a[59]
	a[60], b[60] = b[60], a[60]
}

// swap248 swaps 248-byte elements.
type struct248 [31]uint64
type swap248 struct {
	slice []struct248
	less  func(i, j int) bool
}

func (s *swap248) Len() int           { return len(s.slice) }
func (s *swap248) Less(i, j int) bool { return s.less(i, j) }
func (s *swap248) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
	a[23], b[23] = b[23], a[23]
	a[24], b[24] = b[24], a[24]
	a[25], b[25] = b[25], a[25]
	a[26], b[26] = b[26], a[26]
	a[27], b[27] = b[27], a[27]
	a[28], b[28] = b[28], a[28]
	a[29], b[29] = b[29], a[29]
	a[30], b[30] = b[30], a[30]
}

// swap252 swaps 252-byte elements.
type struct252 [63]uint32
type swap252 struct {
	slice []struct252
	less  func(i, j int) bool
}

func (s *swap252) Len() int           { return len(s.slice) }
func (s *swap252) Less(i, j int) bool { return s.less(i, j) }
func (s *swap252) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
	a[23], b[23] = b[23], a[23]
	a[24], b[24] = b[24], a[24]
	a[25], b[25] = b[25], a[25]
	a[26], b[26] = b[26], a[26]
	a[27], b[27] = b[27], a[27]
	a[28], b[28] = b[28], a[28]
	a[29], b[29] = b[29], a[29]
	a[30], b[30] = b[30], a[30]
	a[31], b[31] = b[31], a[31]
	a[32], b[32] = b[32], a[32]
	a[33], b[33] = b[33], a[33]
	a[34], b[34] = b[34], a[34]
	a[35], b[35] = b[35], a[35]
	a[36], b[36] = b[36], a[36]
	a[37], b[37] = b[37], a[37]
	a[38], b[38] = b[38], a[38]
	a[39], b[39] = b[39], a[39]
	a[40], b[40] = b[40], a[40]
	a[41], b[41] = b[41], a[41]
	a[42], b[42] = b[42], a[42]
	a[43], b[43] = b[43], a[43]
	a[44], b[44] = b[44], a[44]
	a[45], b[45] = b[45], a[45]
	a[46], b[46] = b[46], a[46]
	a[47], b[47] = b[47], a[47]
	a[48], b[48] = b[48], a[48]
	a[49], b[49] = b[49], a[49]
	a[50], b[50] = b[50], a[50]
	a[51], b[51] = b[51], a[51]
	a[52], b[52] = b[52], a[52]
	a[53], b[53] = b[53], a[53]
	a[54], b[54] = b[54], a[54]
	a[55], b[55] = b[55], a[55]
	a[56], b[56] = b[56], a[56]
	a[57], b[57] = b[57], a[57]
	a[58], b[58] = b[58], a[58]
	a[59], b[59] = b[59], a[59]
	a[60], b[60] = b[60], a[60]
	a[61], b[61] = b[61], a[61]
	a[62], b[62] = b[62], a[62]
}

// swap256 swaps 256-byte elements.
type struct256 [32]uint64
type swap256 struct {
	slice []struct256
	less  func(i, j int) bool
}

func (s *swap256) Len() int           { return len(s.slice) }
func (s *swap256) Less(i, j int) bool { return s.less(i, j) }
func (s *swap256) Swap(i, j int) {
	xs := s.slice
	a, b := &xs[i], &xs[j]
	a[0], b[0] = b[0], a[0]
	a[1], b[1] = b[1], a[1]
	a[2], b[2] = b[2], a[2]
	a[3], b[3] = b[3], a[3]
	a[4], b[4] = b[4], a[4]
	a[5], b[5] = b[5], a[5]
	a[6], b[6] = b[6], a[6]
	a[7], b[7] = b[7], a[7]
	a[8], b[8] = b[8], a[8]
	a[9], b[9] = b[9], a[9]
	a[10], b[10] = b[10], a[10]
	a[11], b[11] = b[11], a[11]
	a[12], b[12] = b[12], a[12]
	a[13], b[13] = b[13], a[13]
	a[14], b[14] = b[14], a[14]
	a[15], b[15] = b[15], a[15]
	a[16], b[16] = b[16], a[16]
	a[17], b[17] = b[17], a[17]
	a[18], b[18] = b[18], a[18]
	a[19], b[19] = b[19], a[19]
	a[20], b[20] = b[20], a[20]
	a[21], b[21] = b[21], a[21]
	a[22], b[22] = b[22], a[22]
	a[23], b[23] = b[23], a[23]
	a[24], b[24] = b[24], a[24]
	a[25], b[25] = b[25], a[25]
	a[26], b[26] = b[26], a[26]
	a[27], b[27] = b[27], a[27]
	a[28], b[28] = b[28], a[28]
	a[29], b[29] = b[29], a[29]
	a[30], b[30] = b[30], a[30]
	a[31], b[31] = b[31], a[31]
}
